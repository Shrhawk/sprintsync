# Docker Compose for SprintSync production

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "/sprintsync/prod/database"
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-stream-prefix: "postgres"

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # Demo user environment variables for seeding
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@sprintsync.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_FULL_NAME=${ADMIN_FULL_NAME:-SprintSync Admin}
      - DEMO_EMAIL=${DEMO_EMAIL:-demo@sprintsync.com}
      - DEMO_PASSWORD=${DEMO_PASSWORD:-demo123}
      - DEMO_FULL_NAME=${DEMO_FULL_NAME:-Demo User}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "/sprintsync/prod/backend"
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-stream-prefix: "fastapi"

  # Database seeder service - runs once to seed the database
  seeder:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      # Demo user environment variables for seeding
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@sprintsync.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ADMIN_FULL_NAME=${ADMIN_FULL_NAME:-SprintSync Admin}
      - DEMO_EMAIL=${DEMO_EMAIL:-demo@sprintsync.com}
      - DEMO_PASSWORD=${DEMO_PASSWORD:-demo123}
      - DEMO_FULL_NAME=${DEMO_FULL_NAME:-Demo User}
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "-m", "app.db.seed"]
    restart: "no"
    logging:
      driver: awslogs
      options:
        awslogs-group: "/sprintsync/prod/seeder"
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-stream-prefix: "seeder"

  # React Frontend + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    logging:
      driver: awslogs
      options:
        awslogs-group: "/sprintsync/prod/frontend"
        awslogs-region: "${AWS_REGION:-us-east-1}"
        awslogs-stream-prefix: "nginx"

volumes:
  postgres_data:
